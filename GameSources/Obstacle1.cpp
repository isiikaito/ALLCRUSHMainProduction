/*!
@file Obstacle1.cpp
@brief 障害物実体
*/

#include "stdafx.h"
#include "Project.h"

namespace basecross {
	//構築と破棄
	Obstacle1::Obstacle1(const shared_ptr<Stage>& StagePtr, const Vec3& Scale, const Vec3& Rotation, const Vec3& Position) :
		GameObject(StagePtr),
		m_Scale(Scale),
		m_Rotation(Rotation),
		m_Position(Position)
	{}


	//初期化
	void Obstacle1::OnCreate() {
		//初期位置などの設定
		auto ptrTrans = GetComponent<Transform>();
		ptrTrans->SetScale(m_Scale);
		ptrTrans->SetRotation(m_Rotation);
		ptrTrans->SetPosition(m_Position);

	

		//モデルの見た目を決める
		// モデルとトランスフォームの間の差分行列
		Mat4x4 spanMat; 
		spanMat.affineTransformation(
			Vec3(0.5f, 0.5f, 0.5f),  //大きさ
			Vec3(0.0f, 0.0f, 0.0f),
			Vec3(0.0f, 0.0f, 0.0f),  //回転
			Vec3(-0.4f, -0.5f, -0.6f)//位置
		);
		
		//オブジェクトのグループを得る
		auto group1 = GetStage()->GetSharedObjectGroup(L"Obstacle1_Group1");

		//グループに自分自身を追加
		group1->IntoGroup(GetThis<Obstacle1>());

		//影をつける（シャドウマップを描画する）
		auto ptrShadow = AddComponent<Shadowmap>();

		//影の形（メッシュ）を設定
		ptrShadow->SetMeshResource(L"OBSTACLE1_MESH");
		ptrShadow->SetMeshToTransformMatrix(spanMat);

		//描画コンポーネント
		auto ptrDraw = AddComponent<PNTStaticModelDraw>();

		//メッシュの読み込み
		ptrDraw->SetMeshResource(L"OBSTACLE1_MESH");
		ptrDraw->SetMeshToTransformMatrix(spanMat);

		//RigidbodyBoxの追加
		PsBoxParam param(ptrTrans->GetWorldMatrix(), 0.0f, true, PsMotionType::MotionTypeFixed);
		auto PsPtr = AddComponent<RigidbodyBox>(param);
		
		//キューブ型の当たり判定の追加
		auto Coll = AddComponent<CollisionObb>();
       
		//ほかのオブジェクトの影響を受けない
		Coll->SetFixed(true);


	}

}